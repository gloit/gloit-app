eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"gloit-app/adapters/application\", \n  [\"ember-data\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n    var ApplicationAdapter;\n\n    ApplicationAdapter = DS.ActiveModelAdapter.extend({\n      host: config.APP.api.host,\n      namespace: config.APP.api.namespace\n    });\n\n    __exports__[\"default\"] = ApplicationAdapter;\n  });//# sourceURL=gloit-app/adapters/application.js");

;eval("define(\"gloit-app/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"gloit-app/config/environment\",\"gloit-app/helpers/pt\",\"gloit-app/locales/zh-CN\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n    var ptHelper = __dependency5__[\"default\"];\n    var App;\n\n    Ember.Handlebars.registerBoundHelper(\'pt\', ptHelper);\n\n    NotifierjsConfig.defaultTimeOut = 3000;\n\n    NotifierjsConfig.position = [\"bottom\", \"right\"];\n\n    var translations = __dependency6__[\"default\"];\n\n    Ember.I18n.translations = translations;\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    Ember.Route.reopen({\n      afterModel: function() {\n        return Ember.run.next(this, (function(_this) {\n          return function() {\n            return _this.controllerFor(\'application\').send(\'currentPathDidChange\');\n          };\n        })(this));\n      },\n      parentRoute: function() {\n        var handlerInfos;\n        handlerInfos = this.router.router.state.handlerInfos;\n        if (!handlerInfos) {\n          return;\n        }\n        handlerInfos.forEach((function(_this) {\n          return function(h) {\n            var current, parent;\n            current = h.handler;\n            if (current === _this) {\n              return false;\n            }\n            return parent = current;\n          };\n        })(this));\n        return parent;\n      }\n    });\n\n    App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=gloit-app/app.js");

;eval("define(\"gloit-app/helpers/pt\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var pt;\n\n    pt = function(propName, options) {\n      var key, scope;\n      key = (scope = options.hash.scope) ? \"\" + scope + \".\" + propName : propName;\n      return Ember.I18n.t(key);\n    };\n\n    __exports__[\"default\"] = pt;\n  });//# sourceURL=gloit-app/helpers/pt.js");

;eval("define(\"gloit-app/locales/zh-CN\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var zh_CN;\n\n    zh_CN = {\n      \'models.role.admins\': \'系统管理员\',\n      \'models.role.users\': \'普通用户\',\n      \'routes.users\': \'用户管理\',\n      \'routes.users.new\': \'添加用户\',\n      \'routes.account\': \'个人设置\',\n      \'routes.account.profile\': \'个人信息\',\n      \'routes.account.password\': \'修改密码\',\n      errors: {\n        inclusion: \"不在允许范围内\",\n        exclusion: \"被保留\",\n        invalid: \"无效\",\n        confirmation: \"与{{attribute}}不匹配\",\n        accepted: \"必须接受\",\n        empty: \"不能为空\",\n        blank: \"不能为空\",\n        present: \"必须为空\",\n        tooLong: \"长度太长（最大长度为{{count}}字符）\",\n        tooShort: \"长度太短（最小长度为{{count}}字符）\",\n        wrongLength: \"长度不正确（必须为{{count}}字符）\",\n        notANumber: \"不是数字\",\n        notAnInteger: \"必须为整数\",\n        greaterThan: \"必须大于{{count}}\",\n        greaterThanOrEqualTo: \"必须大于或等于{{count}}\",\n        equalTo: \"必须等于{{count}}\",\n        lessThan: \"必须小于{{count}}\",\n        lessThanOrEqualTo: \"必须小于或等于{{count}}\",\n        otherThan: \"必须不同于{{count}}\",\n        odd: \"必须为奇数\",\n        even: \"必须为偶数\"\n      }\n    };\n\n    __exports__[\"default\"] = zh_CN;\n  });//# sourceURL=gloit-app/locales/zh-CN.js");

;eval("define(\"gloit-app/components/loading-slider\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      tagName: \'div\',\n      classNames: [\'loading-slider\'],\n      stripeColor: function() {\n        var color = this.get(\'color\');\n        if ( ! color) {\n          return this.$(\'span\').removeAttr(\'style\');\n        }\n        this.$(\'span\').css(\'background-color\', color);\n      }.observes(\'color\'),\n      manage: function() {\n        if (this.get(\'isLoading\')) {\n          this.animate.call(this);\n        } else {\n          this.set(\'isLoaded\', true);\n        }\n      }.observes(\'isLoading\'),\n      animate: function() {\n        this.set(\'isLoaded\', false);\n        var self = this,\n            elapsedTime = 0,\n            inner = this.$().find(\'span\'),\n            duration = this.getWithDefault(\'duration\', 300),\n            innerWidth = 0,\n            outerWidth = this.$().width(),\n            stepWidth = Math.round(outerWidth / 100);\n\n        var interval = window.setInterval(function() {\n          elapsedTime = elapsedTime + 10;\n          inner.width(innerWidth = innerWidth + stepWidth);\n\n          // slow the animation if we used more than 75% the estimated duration\n          // or 66% of the animation width\n          if (elapsedTime > (duration * 0.75) || innerWidth > (outerWidth * 0.66)) {\n            // don\'t stop the animation completely\n            if (stepWidth > 1) {\n              stepWidth = stepWidth * 0.97;\n            }\n          }\n\n          if (innerWidth > outerWidth) {\n            Ember.run.later(function() {\n              inner.width(0);\n              window.clearInterval(interval);\n            }, 50);\n          }\n\n          // the activity has finished\n          if (self.get(\'isLoaded\')) {\n            // start with a sizable pixel step\n            if (stepWidth < 10) {\n              stepWidth = 10;\n            }\n            // accelerate to completion\n            stepWidth = stepWidth + stepWidth;\n          }\n        }, 10);\n      },\n      didInsertElement: function() {\n        this.$().html(\'<span>\');\n\n        var color = this.get(\'color\');\n        if (color) {\n          this.$(\'span\').css(\'background-color\', color);\n        }\n      }\n    });\n  });//# sourceURL=gloit-app/components/loading-slider.js");

;eval("define(\"gloit-app/controllers/account\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var AccountController;\n\n    AccountController = Ember.ObjectController.extend({\n      needs: \'authenticated\',\n      availableRoles: Ember.computed.alias(\'controllers.authenticated.availableRoles\'),\n      listItems: [\n        {\n          text: \'个人信息\',\n          icon: \'fa fa-user\',\n          route: \'account.profile\'\n        }, {\n          text: \'修改密码\',\n          icon: \'fa fa-key\',\n          route: \'account.password\'\n        }\n      ]\n    });\n\n    __exports__[\"default\"] = AccountController;\n  });//# sourceURL=gloit-app/controllers/account.js");

;eval("define(\"gloit-app/controllers/account/password\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var PasswordController;\n\n    PasswordController = Ember.ObjectController.extend(Ember.Validations.Mixin, {\n      actions: {\n        save: function() {\n          this.send(\'loading\');\n          return this.get(\'model\').changePassword(this.get(\'oldPassword\'), this.get(\'newPassword\'), this.get(\'newPasswordConfirmation\')).then((function(_this) {\n            return function() {\n              Notifier.success(\'修改密码成功\');\n              return _this.setProperties({\n                oldPassword: null,\n                newPassword: null,\n                newPasswordConfirmation: null\n              });\n            };\n          })(this), function(errorMsg) {\n            return Notifier.error(errorMsg);\n          })[\"finally\"]((function(_this) {\n            return function() {\n              return _this.send(\'finished\');\n            };\n          })(this));\n        },\n        revertChanges: function() {\n          return this.setProperties({\n            oldPassword: null,\n            newPassword: null,\n            newPasswordConfirmation: null\n          });\n        }\n      }\n    });\n\n    PasswordController.reopen({\n      validations: {\n        oldPassword: {\n          presence: true\n        },\n        newPassword: {\n          presence: true,\n          confirmation: {\n            message: \'两次输入的密码不匹配\'\n          }\n        }\n      }\n    });\n\n    __exports__[\"default\"] = PasswordController;\n  });//# sourceURL=gloit-app/controllers/account/password.js");

;eval("define(\"gloit-app/controllers/account/profile\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ProfileController;\n\n    ProfileController = Ember.ObjectController.extend({\n      actions: {\n        revertChanges: function() {\n          if (this.get(\'model.isDirty\')) {\n            return this.get(\'model\').rollback();\n          }\n        },\n        save: function() {\n          this.send(\'loading\');\n          return this.get(\'model\').save().then(function() {\n            return Notifier.success(\'修改账号信息成功\');\n          }, function() {\n            return Notifier.error(\'修改账号信息失败\');\n          })[\"finally\"]((function(_this) {\n            return function() {\n              return _this.send(\'finished\');\n            };\n          })(this));\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ProfileController;\n  });//# sourceURL=gloit-app/controllers/account/profile.js");

;eval("define(\"gloit-app/controllers/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ApplicationController;\n\n    ApplicationController = Ember.Controller.extend({\n      brand: {\n        name: \'Gloit\'\n      },\n      sidebar: {\n        menus: [\n          {\n            icon: \'fa fa-gear\',\n            text: \'系统管理\',\n            roles: [\'admins\'],\n            items: [\n              {\n                icon: \'fa fa-users\',\n                route: \'users\',\n                text: \'用户管理\',\n                roles: [\'admins\']\n              }\n            ]\n          }\n        ],\n        starterItems: [\n          {\n            icon: \'fa fa-user\',\n            route: \'account.profile\',\n            text: \'个人信息\'\n          }, {\n            icon: \'fa fa-key\',\n            route: \'account.password\',\n            text: \'修改密码\'\n          }, {\n            icon: \'fa fa-sign-out\',\n            route: \'logout\',\n            text: \'注销\'\n          }\n        ]\n      },\n      availableRoles: [\n        {\n          label: \'系统管理员\',\n          value: \'admins\'\n        }, {\n          label: \'普通用户\',\n          value: \'users\'\n        }\n      ],\n      availableSidebar: (function() {\n        var menus, user;\n        menus = [];\n        user = this.get(\'session.currentUser\');\n        this.get(\'sidebar.menus\').forEach(function(menu) {\n          var items, newMenu;\n          if (user.hasRole(menu.roles, \'any\')) {\n            newMenu = Ember.merge({}, menu);\n            menus.push(newMenu);\n            items = [];\n            menu.items.forEach(function(item) {\n              if (user.hasRole(item.roles, \'any\')) {\n                return items.push(item);\n              }\n            });\n            return newMenu.items = items;\n          }\n        });\n        return {\n          menus: menus,\n          starterItems: this.get(\'sidebar.starterItems\')\n        };\n      }).property().volatile(),\n      breadcrumbs: [],\n      actions: {\n        currentPathDidChange: function() {\n          var breadcrumbs, routes;\n          this.get(\'breadcrumbs\').clear();\n          routes = this.container.lookup(\'router:main\').get(\'router.currentHandlerInfos\');\n          if (Ember.isEmpty(routes)) {\n            return;\n          }\n          breadcrumbs = [];\n          routes.forEach(function(route) {\n            var breadcrumb, context, handler, name;\n            name = route.name;\n            if (name.indexOf(\'.index\') !== -1 || name === \'application\' || name === \'authenticated\') {\n              return;\n            }\n            handler = route.handler;\n            breadcrumb = Ember.Object.create({\n              route: handler.routeName,\n              name: Ember.I18n.t(\"routes.\" + handler.routeName),\n              model: null\n            });\n            if (!Ember.isEmpty(Ember.keys(route.params))) {\n              context = handler.context;\n              breadcrumb.setProperties({\n                model: context,\n                name: context.get(\'name\') || context.get(\'id\')\n              });\n            }\n            return breadcrumbs.pushObject(breadcrumb);\n          });\n          if (!Ember.isEmpty(breadcrumbs)) {\n            return this.set(\'breadcrumbs\', breadcrumbs);\n          }\n        },\n        triggerMenu: function(menu) {\n          return this.transitionToRoute(menu.items.get(\'firstObject.route\'));\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ApplicationController;\n  });//# sourceURL=gloit-app/controllers/application.js");

;eval("define(\"gloit-app/controllers/authenticated\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var AuthenticatedController;\n\n    AuthenticatedController = Ember.ObjectController.extend({\n      needs: \'application\',\n      brand: Ember.computed.alias(\'controllers.application.brand\'),\n      breadcrumbs: Ember.computed.alias(\'controllers.application.breadcrumbs\'),\n      sidebar: Ember.computed.alias(\'controllers.application.availableSidebar\'),\n      availableRoles: Ember.computed.alias(\'controllers.application.availableRoles\'),\n      actions: {\n        triggerMenu: function(menu) {\n          return this.transitionToRoute(menu.items.get(\'firstObject.route\'));\n        }\n      }\n    });\n\n    __exports__[\"default\"] = AuthenticatedController;\n  });//# sourceURL=gloit-app/controllers/authenticated.js");

;eval("define(\"gloit-app/controllers/login\", \n  [\"ember\",\"simple-auth/mixins/login-controller-mixin\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var LoginControllerMixin = __dependency2__[\"default\"];\n    var config = __dependency3__[\"default\"];\n    var LoginController;\n\n    LoginController = Ember.Controller.extend(LoginControllerMixin, {\n      authenticator: \"authenticator:gloit-app\",\n      registerable: true,\n      title: \'用户登录\',\n      copyright: \'&copy; 2014\',\n      supportedBrowers: [\n        {\n          name: \'Chrome\',\n          url: \'http://www.google.com/chrome\',\n          icon: config.baseURL + \'images/chrome.png\'\n        }, {\n          name: \'Firefox\',\n          url: \'http://www.mozilla.org/en-US/firefox/new/\',\n          icon: config.baseURL + \'images/firefox.png\'\n        }, {\n          name: \'Safari\',\n          url: \'http://www.apple.com/sg/safari/\',\n          icon: config.baseURL + \'images/safari.png\'\n        }, {\n          name: \'IE 10+\',\n          url: \'http://windows.microsoft.com/en-sg/internet-explorer/ie-10-worldwide-languages\',\n          icon: config.baseURL + \'images/ie.png\'\n        }\n      ]\n    });\n\n    __exports__[\"default\"] = LoginController;\n  });//# sourceURL=gloit-app/controllers/login.js");

;eval("define(\"gloit-app/controllers/registrations/new\", \n  [\"ember\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n    var NewController;\n\n    NewController = Ember.ObjectController.extend({\n      username: null,\n      realname: null,\n      email: null,\n      password: null,\n      passwordConfirmation: null,\n      actions: {\n        save: function() {\n          return Ember.$.ajax({\n            url: \"\" + config.APP.api.baseUrl + \"/users\",\n            type: \'POST\',\n            data: {\n              user: {\n                username: this.get(\'username\'),\n                realname: this.get(\'realname\'),\n                email: this.get(\'email\'),\n                password: this.get(\'password\'),\n                password_confirmation: this.get(\'passwordConfirmation\'),\n                roles: \'user\'\n              }\n            },\n            dataType: \'json\'\n          }).then((function(_this) {\n            return function() {\n              return _this.transitionToRoute(\'registrations.success\');\n            };\n          })(this), function() {\n            return Notifier.error(\'用户注册失败\');\n          });\n        },\n        cancel: function() {\n          return this.transitionToRoute(\'login\');\n        }\n      }\n    });\n\n    __exports__[\"default\"] = NewController;\n  });//# sourceURL=gloit-app/controllers/registrations/new.js");

;eval("define(\"gloit-app/controllers/user\", \n  [\"ember\",\"gloit-app/mixins/controller/model-manager\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ModelManagerMixin = __dependency2__[\"default\"];\n    var UserController;\n\n    UserController = Ember.ObjectController.extend(ModelManagerMixin, {\n      needs: [\'authenticated\'],\n      formLegend: \'用户管理\',\n      availableRoles: Ember.computed.alias(\'controllers.authenticated.availableRoles\'),\n      modelName: \'user\',\n      humanModelName: \'用户\',\n      removeConfirmationName: \'removeUserConfirmation\',\n      lockable: (function() {\n        return !this.get(\'model.isNew\') && this.get(\'model.lockable\') && this.get(\'model.id\') !== this.get(\'session.currentUser.id\');\n      }).property(\'model.{id,lockable,isNew}\', \'session.currentUser.id\'),\n      beforeRemove: function() {\n        if (this.get(\'model.id\') === this.get(\'session.currentUser.id\')) {\n          Notifier.error(\'对不起，您不允许删除自己！\');\n          return false;\n        } else {\n          return true;\n        }\n      },\n      actions: {\n        lock: function() {\n          return this.get(\'model\').lock().then((function(_this) {\n            return function() {\n              _this.get(\'model\').reload();\n              return Notifier.success(\'用户锁定成功\');\n            };\n          })(this), function() {\n            return Notifier.error(\'用户锁定失败\');\n          });\n        },\n        unlock: function() {\n          return this.get(\'model\').unlock().then((function(_this) {\n            return function() {\n              _this.get(\'model\').reload();\n              return Notifier.success(\'用户解锁成功\');\n            };\n          })(this), function() {\n            return Notifier.error(\'用户解锁失败\');\n          });\n        }\n      }\n    });\n\n    __exports__[\"default\"] = UserController;\n  });//# sourceURL=gloit-app/controllers/user.js");

;eval("define(\"gloit-app/mixins/controller/model-manager\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ModelManagerMixin;\n\n    ModelManagerMixin = Ember.Mixin.create({\n      modelName: \'\',\n      humanModelName: \'\',\n      afterSaveRoute: (function() {\n        return this.get(\'modelName\').dasherize();\n      }).property(\'modelName\'),\n      afterCancelRoute: (function() {\n        return this.get(\'modelName\').dasherize().pluralize();\n      }).property(\'modelName\'),\n      afterDestroyRoute: (function() {\n        return this.get(\'modelName\').dasherize().pluralize();\n      }).property(\'modelName\'),\n      removeConfirmationName: \'\',\n      removeConfirmationTitle: \'确认删除\',\n      removeConfirmationMessage: (function() {\n        return \"您确认需要删除该\" + (this.get(\'humanModelName\')) + \"吗？\";\n      }).property(\'humanModelName\'),\n      removeConfirmationButtons: [\n        Ember.Object.create({\n          title: \'确认\',\n          clicked: \"confirmRemove\"\n        }), Ember.Object.create({\n          title: \'取消\',\n          dismiss: \'modal\'\n        })\n      ],\n      beforeSave: Ember.K,\n      afterSave: Ember.K,\n      beforeConfirmRemove: function() {\n        Ember.deprecate(\'`ModelManager#beforeConfirmRemove` is droped, please use `ModelManager#beforeRemove` instead.\');\n        return true;\n      },\n      beforeRemove: Ember.K,\n      afterRemove: Ember.K,\n      actions: {\n        revertChanges: function() {\n          if (this.get(\'model.isDirty\')) {\n            return this.get(\'model\').rollback();\n          }\n        },\n        save: function() {\n          var saveFailed, saved;\n          if (!this.beforeSave()) {\n            return;\n          }\n          saved = (function(_this) {\n            return function() {\n              Notifier.success(\"保存\" + (_this.get(\'humanModelName\')) + \"成功\");\n              _this.afterSave();\n              return _this.transitionToRoute(_this.get(\'afterSaveRoute\'), _this.get(\'model\'));\n            };\n          })(this);\n          saveFailed = (function(_this) {\n            return function() {\n              return Notifier.error(\"保存\" + (_this.get(\'humanModelName\')) + \"失败\");\n            };\n          })(this);\n          this.send(\'loading\');\n          return this.get(\'model\').save().then(saved, saveFailed)[\"finally\"]((function(_this) {\n            return function() {\n              return _this.send(\'finished\');\n            };\n          })(this));\n        },\n        cancel: function() {\n          this.get(\'model\').rollback();\n          return this.transitionToRoute(this.get(\'afterCancelRoute\'));\n        },\n        remove: function() {\n          return Bootstrap.ModalManager.show(this.get(\'removeConfirmationName\'));\n        },\n        confirmRemove: function() {\n          var removeFailed, removed;\n          Bootstrap.ModalManager.hide(this.get(\'removeConfirmationName\'));\n          if (!(this.beforeConfirmRemove() && this.beforeRemove())) {\n            return false;\n          }\n          removed = (function(_this) {\n            return function() {\n              Notifier.success(\"删除\" + (_this.get(\'humanModelName\')) + \"成功\");\n              _this.afterRemove();\n              return _this.transitionToRoute(_this.get(\'afterDestroyRoute\'));\n            };\n          })(this);\n          removeFailed = (function(_this) {\n            return function(response) {\n              _this.get(\'model\').rollback();\n              if (response.responseJSON.msg) {\n                return Notifier.error(response.responseJSON.msg);\n              } else {\n                return Notifier.error(\"删除\" + (_this.get(\'humanModelName\')) + \"失败\");\n              }\n            };\n          })(this);\n          this.send(\'loading\');\n          this.get(\'model\').deleteRecord();\n          return this.get(\'model\').save().then(removed, removeFailed)[\"finally\"]((function(_this) {\n            return function() {\n              return _this.send(\'finished\');\n            };\n          })(this));\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ModelManagerMixin;\n  });//# sourceURL=gloit-app/mixins/controller/model-manager.js");

;eval("define(\"gloit-app/controllers/users\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var UsersController;\n\n    UsersController = Ember.ArrayController.extend({\n      toolbarLinks: [\n        {\n          text: \'添加\',\n          route: \'users.new\',\n          icon: \'fa fa-plus\'\n        }\n      ]\n    });\n\n    __exports__[\"default\"] = UsersController;\n  });//# sourceURL=gloit-app/controllers/users.js");

;eval("define(\"gloit-app/helpers/format-date\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var helper;\n\n    helper = Ember.Handlebars.makeBoundHelper(function(value, options) {\n      var format;\n      if (!value) {\n        return \'\';\n      }\n      format = options.hash[\'format\'] || \"YYYY-MM-DD HH:mm:ss\";\n      return new moment(value).format(format).htmlSafe();\n    });\n\n    __exports__[\"default\"] = helper;\n  });//# sourceURL=gloit-app/helpers/format-date.js");

;eval("define(\"gloit-app/helpers/time-ago\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var helper;\n\n    helper = Ember.Handlebars.makeBoundHelper(function(value) {\n      if (!value) {\n        return \'\';\n      }\n      return new moment(value).fromNow().htmlSafe();\n    });\n\n    __exports__[\"default\"] = helper;\n  });//# sourceURL=gloit-app/helpers/time-ago.js");

;eval("define(\"gloit-app/initializers/authentication\", \n  [\"ember\",\"simple-auth-devise/authenticators/devise\",\"simple-auth-devise/authorizers/devise\",\"simple-auth/session\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var DeviseAuthenticator = __dependency2__[\"default\"];\n    var DeviseAuthorizer = __dependency3__[\"default\"];\n    var Session = __dependency4__[\"default\"];\n    var config = __dependency5__[\"default\"];\n    var GloitAppAuthenticator, GloitAppAuthorizer, authentication;\n\n    GloitAppAuthenticator = DeviseAuthenticator.extend({\n      authenticate: function(credentials) {\n        return new Ember.RSVP.Promise((function(_this) {\n          return function(resolve, reject) {\n            var data, self;\n            data = {};\n            data[_this.resourceName] = {\n              login: credentials.identification,\n              password: credentials.password\n            };\n            self = _this;\n            return _this.makeRequest(data).then(function(response) {\n              return Ember.run(function() {\n                return resolve(self._extractResponse(response));\n              });\n            }, function(xhr) {\n              return Ember.run(function() {\n                return reject(xhr.responseJSON || xhr.responseText);\n              });\n            });\n          };\n        })(this));\n      },\n      _extractResponse: function(response) {\n        return Ember.merge(response.user, {\n          user_token: response.user.authentication_token,\n          user_email: response.user.email\n        });\n      }\n    });\n\n    GloitAppAuthorizer = DeviseAuthorizer.extend({\n      authorize: function(jqXHR) {\n        var userEmail, userToken;\n        userToken = this.get(\'session.user_token\');\n        userEmail = this.get(\'session.user_email\');\n        if (this.get(\'session.isAuthenticated\') && !Ember.isEmpty(userToken) && !Ember.isEmpty(userEmail)) {\n          jqXHR.setRequestHeader(\'X-User-Token\', userToken);\n          return jqXHR.setRequestHeader(\'X-User-Email\', userEmail);\n        }\n      }\n    });\n\n    Session.reopen({\n      currentUser: (function() {\n        return this.get(\'container\').lookup(\'store:main\').push(\'user\', this.get(\'content\'));\n      }).property(\'content.id\')\n    });\n\n    authentication = {\n      name: \'authentication\',\n      before: \'simple-auth\',\n      initialize: function(container) {\n        var currentURL, lastPageLoadedAt, now;\n        container.register(\'authenticator:gloit-app\', GloitAppAuthenticator);\n        container.register(\'authorizer:gloit-app\', GloitAppAuthorizer);\n        currentURL = localStorage.getItem(\'gloit-app:current-url\');\n        lastPageLoadedAt = new Date(localStorage.getItem(\'gloit-app:last-page-loaded-at\'));\n        now = new Date();\n        if (window.location.href.indexOf(currentURL) < 0 || now - lastPageLoadedAt > 20 * 60 * 1000) {\n          localStorage.clear();\n        }\n        return localStorage.setItem(\'gloit-app:last-page-loaded-at\', now);\n      }\n    };\n\n    __exports__[\"default\"] = authentication;\n  });//# sourceURL=gloit-app/initializers/authentication.js");

;eval("define(\"gloit-app/initializers/simple-auth-devise\", \n  [\"simple-auth-devise/configuration\",\"simple-auth-devise/authenticators/devise\",\"simple-auth-devise/authorizers/devise\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Configuration = __dependency1__[\"default\"];\n    var Authenticator = __dependency2__[\"default\"];\n    var Authorizer = __dependency3__[\"default\"];\n    var ENV = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name:       \'simple-auth-devise\',\n      before:     \'simple-auth\',\n      initialize: function(container, application) {\n        Configuration.load(container, ENV[\'simple-auth-devise\'] || {});\n        container.register(\'simple-auth-authorizer:devise\', Authorizer);\n        container.register(\'simple-auth-authenticator:devise\', Authenticator);\n      }\n    };\n  });//# sourceURL=gloit-app/initializers/simple-auth-devise.js");

;eval("define(\"gloit-app/initializers/simple-auth\", \n  [\"simple-auth/configuration\",\"simple-auth/setup\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Configuration = __dependency1__[\"default\"];\n    var setup = __dependency2__[\"default\"];\n    var ENV = __dependency3__[\"default\"];\n\n    __exports__[\"default\"] = {\n      name:       \'simple-auth\',\n      initialize: function(container, application) {\n        Configuration.load(container, ENV[\'simple-auth\'] || {});\n        setup(container, application);\n      }\n    };\n  });//# sourceURL=gloit-app/initializers/simple-auth.js");

;eval("define(\"gloit-app/mixins/controller/pageable\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var PageableMixin;\n\n    PageableMixin = Ember.Mixin.create({\n      isPageable: true,\n      total: 0,\n      pageSize: 20,\n      currentPage: 0,\n      windowSize: 9,\n      startPage: (function() {\n        var currentPage, startPage, totalPages;\n        currentPage = this.get(\'currentPage\');\n        totalPages = this.get(\'totalPages\');\n        if (totalPages <= this.windowSize) {\n          return 1;\n        }\n        startPage = currentPage - Math.floor(this.windowSize / 2) > 1 ? currentPage - Math.floor(this.windowSize / 2) : 1;\n        if (startPage + (this.windowSize - 1) >= totalPages) {\n          startPage = totalPages - this.windowSize + 1;\n        }\n        return startPage;\n      }).property(\'currentPage\'),\n      totalPages: (function() {\n        return Math.ceil(this.get(\'total\') / this.get(\'pageSize\')) || 0;\n      }).property(\'total\', \'pageSize\'),\n      actions: {\n        page: function(page) {\n          return this.set(\'currentPage\', page);\n        }\n      }\n    });\n\n    __exports__[\"default\"] = PageableMixin;\n  });//# sourceURL=gloit-app/mixins/controller/pageable.js");

;eval("define(\"gloit-app/mixins/controller/searchable\", \n  [\"ember\",\"gloit-app/mixins/controller/pageable\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var PageableMixin = __dependency2__[\"default\"];\n    var SearchableMixin;\n\n    SearchableMixin = Ember.Mixin.create(PageableMixin, {\n      searchResultProperty: \'model\',\n      selectedResult: new Ember.Set(),\n      query: {},\n      paginate: (function() {\n        this.setDefaultQuery();\n        return this._search();\n      }).observes(\'currentPage\'),\n      defaultQuery: {},\n      setDefaultQuery: function() {\n        var k, v, _ref, _results;\n        _ref = this.get(\'defaultQuery\');\n        _results = [];\n        for (k in _ref) {\n          v = _ref[k];\n          _results.push(this._setQuery(k, v));\n        }\n        return _results;\n      },\n      actions: {\n        search: function() {\n          this.set(\'currentPage\', 1);\n          this.setDefaultQuery();\n          return this._search();\n        }\n      },\n      _setQuery: function(name, value) {\n        if (Ember.isEmpty(value)) {\n          return delete this.get(\'query\')[name];\n        } else {\n          return this.set(\"query.\" + name, value);\n        }\n      },\n      _search: function() {\n        if (this.get(\'keyForModel\')) {\n          return this.get(\'store\').find(this.get(\'keyForModel\'), {\n            q: this.get(\'query\'),\n            page: this.get(\'currentPage\'),\n            limit: this.get(\'pageSize\')\n          }).then((function(_this) {\n            return function(records) {\n              _this.set(\'total\', records.meta.total);\n              return _this.set(_this.get(\'searchResultProperty\'), records);\n            };\n          })(this));\n        } else {\n          return Ember.Logger.error(\'You should specify the key of the model which will be searched.\');\n        }\n      }\n    });\n\n    __exports__[\"default\"] = SearchableMixin;\n  });//# sourceURL=gloit-app/mixins/controller/searchable.js");

;eval("define(\"gloit-app/mixins/route/query-cleaner\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var QueryCleanerMixin;\n\n    QueryCleanerMixin = Ember.Mixin.create({\n      setupController: function(controller, model) {\n        if (controller.get(\'query\')) {\n          controller.set(\'query\', {});\n        }\n        return this._super(controller, model);\n      }\n    });\n\n    __exports__[\"default\"] = QueryCleanerMixin;\n  });//# sourceURL=gloit-app/mixins/route/query-cleaner.js");

;eval("define(\"gloit-app/models/user\", \n  [\"ember\",\"ember-data\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var DS = __dependency2__[\"default\"];\n    var config = __dependency3__[\"default\"];\n    var User;\n\n    User = DS.Model.extend(Ember.Validations.Mixin, {\n      username: DS.attr(),\n      realname: DS.attr(),\n      email: DS.attr(),\n      password: DS.attr(),\n      roles: DS.attr(),\n      accessLocked: DS.attr(\'boolean\'),\n      name: Ember.computed.any(\'realname\', \'username\'),\n      lockable: Ember.computed.not(\'accessLocked\'),\n      unlockable: Ember.computed.alias(\'accessLocked\'),\n      changePassword: function(oldPwd, newPwd, pwdConfirmation) {\n        return new Ember.RSVP.Promise(function(resolve, reject) {\n          if (newPwd !== pwdConfirmation) {\n            return reject(\'您两次输入的新密码不匹配\');\n          }\n          return Ember.$.ajax({\n            url: \"\" + config.APP.api.baseUrl + \"/password\",\n            type: \"PUT\",\n            data: {\n              password: {\n                current_password: oldPwd,\n                password: newPwd,\n                password_confirmation: pwdConfirmation\n              }\n            },\n            dataType: \'json\'\n          }).then(function() {\n            return resolve();\n          }, function(jqXHR) {\n            return reject(jqXHR.responseJSON.errors.password);\n          });\n        });\n      },\n      lock: function() {\n        return Ember.$.post(\"\" + config.APP.api.baseUrl + \"/users/\" + (this.get(\'id\')) + \"/lock\").then((function(_this) {\n          return function(user) {\n            return _this.get(\'store\').pushPayload(\'user\', user);\n          };\n        })(this));\n      },\n      unlock: function() {\n        return Ember.$.post(\"\" + config.APP.api.baseUrl + \"/users/\" + (this.get(\'id\')) + \"/unlock\").then((function(_this) {\n          return function(user) {\n            return _this.get(\'store\').pushPayload(\'user\', user);\n          };\n        })(this));\n      },\n      hasRole: function(roles, matchMode) {\n        var match;\n        if (!roles) {\n          return false;\n        }\n        if (typeof roles === \'string\') {\n          roles = [roles];\n        }\n        match = false;\n        if (matchMode === \'any\') {\n          roles.forEach((function(_this) {\n            return function(role) {\n              if (_this.get(\'roles\') && _this.get(\'roles\').split(\', \').contains(role)) {\n                match = true;\n                return false;\n              }\n            };\n          })(this));\n        } else {\n          roles.forEach((function(_this) {\n            return function(role) {\n              if (!_this.get(\'roles\') || !_this.get(\'roles\').split(\', \').contains(role)) {\n                match = false;\n                return false;\n              }\n            };\n          })(this));\n        }\n        return match;\n      }\n    });\n\n    User.reopen({\n      validations: {\n        username: {\n          presence: true\n        },\n        email: {\n          presence: true\n        },\n        password: {\n          presence: true\n        },\n        roles: {\n          presence: true\n        }\n      }\n    });\n\n    __exports__[\"default\"] = User;\n  });//# sourceURL=gloit-app/models/user.js");

;eval("define(\"gloit-app/router\", \n  [\"ember\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n    var Router;\n\n    Router = Ember.Router.extend({\n      location: config.locationType,\n      storeURL: (function() {\n        var currentURL;\n        currentURL = this.get(\'url\');\n        if (currentURL !== \'/login\') {\n          return localStorage.setItem(\'gloit-app:current-url\', currentURL);\n        }\n      }).on(\'didTransition\')\n    });\n\n    Router.map(function() {\n      this.route(\'login\');\n      this.route(\'logout\');\n      this.resource(\'registrations\', function() {\n        this.route(\'new\');\n        return this.route(\'success\');\n      });\n      return this.resource(\'authenticated\', {\n        path: \'/\'\n      }, function() {\n        this.resource(\'account\', function() {\n          this.route(\'profile\');\n          return this.route(\'password\');\n        });\n        return this.resource(\'users\', {\n          path: \'/users\'\n        }, function() {\n          this.route(\'new\');\n          return this.resource(\'user\', {\n            path: \'/:user_id\'\n          });\n        });\n      });\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=gloit-app/router.js");

;eval("define(\"gloit-app/routes/account/password\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var PasswordRoute;\n\n    PasswordRoute = Ember.Route.extend({\n      model: function() {\n        return this.get(\'session.currentUser\');\n      }\n    });\n\n    __exports__[\"default\"] = PasswordRoute;\n  });//# sourceURL=gloit-app/routes/account/password.js");

;eval("define(\"gloit-app/routes/account/profile\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ProfileRoute;\n\n    ProfileRoute = Ember.Route.extend({\n      model: function() {\n        return this.get(\'session.currentUser\');\n      }\n    });\n\n    __exports__[\"default\"] = ProfileRoute;\n  });//# sourceURL=gloit-app/routes/account/profile.js");

;eval("define(\"gloit-app/routes/application\", \n  [\"ember\",\"simple-auth/mixins/application-route-mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ApplicationRouteMixin = __dependency2__[\"default\"];\n    var ApplicationRoute;\n\n    ApplicationRoute = Ember.Route.extend(ApplicationRouteMixin, {\n      actions: {\n        loading: function() {\n          var controller;\n          controller = this.controllerFor(\'application\');\n          controller.set(\'loading\', true);\n          return this.router.one(\'didTransition\', function() {\n            return controller.set(\'loading\', false);\n          });\n        },\n        finished: function() {\n          return this.controllerFor(\'application\').set(\'loading\', false);\n        }\n      }\n    });\n\n    __exports__[\"default\"] = ApplicationRoute;\n  });//# sourceURL=gloit-app/routes/application.js");

;eval("define(\"gloit-app/routes/authenticated\", \n  [\"ember\",\"simple-auth/mixins/authenticated-route-mixin\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var AuthenticatedRouteMixin = __dependency2__[\"default\"];\n    var AuthenticatedRoute;\n\n    AuthenticatedRoute = Ember.Route.extend(AuthenticatedRouteMixin, {\n      beforeModel: function(transition) {\n        var url;\n        this._super(transition);\n        if (this.get(\'session.isAuthenticated\')) {\n          url = localStorage.getItem(\'gloit-app:current-url\');\n          return this.transitionTo(url || \'authenticated\');\n        }\n      }\n    });\n\n    __exports__[\"default\"] = AuthenticatedRoute;\n  });//# sourceURL=gloit-app/routes/authenticated.js");

;eval("define(\"gloit-app/routes/logout\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var LogoutRoute;\n\n    LogoutRoute = Ember.Route.extend({\n      beforeModel: function() {\n        var v, _, _ref;\n        _ref = this.store.typeMaps;\n        for (_ in _ref) {\n          v = _ref[_];\n          this.store.unloadAll(v.type);\n        }\n        return this.send(\'invalidateSession\');\n      }\n    });\n\n    __exports__[\"default\"] = LogoutRoute;\n  });//# sourceURL=gloit-app/routes/logout.js");

;eval("define(\"gloit-app/routes/registrations/new\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Route.extend();\n  });//# sourceURL=gloit-app/routes/registrations/new.js");

;eval("define(\"gloit-app/routes/user\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var UserRoute;\n\n    UserRoute = Ember.Route.extend({\n      model: function(params) {\n        return this.store.find(\'user\', params.user_id);\n      },\n      setupController: function(controller, model) {\n        controller.set(\'formLegend\', \'编辑用户\');\n        return this._super(controller, model);\n      },\n      actions: {\n        willTransition: function() {\n          return this.get(\'controller\').send(\'revertChanges\');\n        }\n      }\n    });\n\n    __exports__[\"default\"] = UserRoute;\n  });//# sourceURL=gloit-app/routes/user.js");

;eval("define(\"gloit-app/routes/users\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var UsersRoute;\n\n    UsersRoute = Ember.Route.extend({\n      model: function() {\n        return this.store.find(\'user\');\n      }\n    });\n\n    __exports__[\"default\"] = UsersRoute;\n  });//# sourceURL=gloit-app/routes/users.js");

;eval("define(\"gloit-app/routes/users/new\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var NewRoute;\n\n    NewRoute = Ember.Route.extend({\n      controllerName: \'user\',\n      model: function() {\n        return this.store.createRecord(\'user\');\n      },\n      setupController: function(controller, model) {\n        controller.set(\'formLegend\', \'添加用户\');\n        return this._super(controller, model);\n      },\n      actions: {\n        willTransition: function() {\n          return this.get(\'controller\').send(\'revertChanges\');\n        }\n      }\n    });\n\n    __exports__[\"default\"] = NewRoute;\n  });//# sourceURL=gloit-app/routes/users/new.js");

;eval("define(\"gloit-app/serializers/application\", \n  [\"ember-data\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var DS = __dependency1__[\"default\"];\n    __exports__[\"default\"] = DS.ActiveModelSerializer.extend();\n  });//# sourceURL=gloit-app/serializers/application.js");

;eval("define(\"gloit-app/templates/account\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var stack1, helper, options;\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"route\", options) : helperMissing.call(depth0, \"link-to\", \"route\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"<i \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"icon\")\n      },hashTypes:{\'class\': \"ID\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></i>\");\n      stack1 = helpers._triageMustache.call(depth0, \"text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      }\n\n    function program4(depth0,data) {\n      \n      var buffer = \'\';\n      return buffer;\n      }\n\n      stack1 = (helper = helpers.collection || (depth0 && depth0.collection),options={hash:{\n        \'content\': (\"listItems\"),\n        \'height\': (100),\n        \'width\': (200),\n        \'rowHeight\': (45)\n      },hashTypes:{\'content\': \"ID\",\'height\': \"INTEGER\",\'width\': \"INTEGER\",\'rowHeight\': \"INTEGER\"},hashContexts:{\'content\': depth0,\'height\': depth0,\'width\': depth0,\'rowHeight\': depth0},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"GloitComponent.SidelistComponent\", options) : helperMissing.call(depth0, \"collection\", \"GloitComponent.SidelistComponent\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=gloit-app/templates/account.js");

;eval("define(\"gloit-app/templates/account/password\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', helper, options;\n      data.buffer.push(\"<h2>修改密码</h2>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"oldPassword\"),\n        \'type\': (\"password\"),\n        \'label\': (\"旧密码\"),\n        \'placeholder\': (\"请输入您当前的密码...\")\n      },hashTypes:{\'property\': \"STRING\",\'type\': \"STRING\",\'label\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'type\': depth0,\'label\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"newPassword\"),\n        \'type\': (\"password\"),\n        \'label\': (\"新密码\"),\n        \'placeholder\': (\"请输入您的新密码...\")\n      },hashTypes:{\'property\': \"STRING\",\'type\': \"STRING\",\'label\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'type\': depth0,\'label\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"newPasswordConfirmation\"),\n        \'type\': (\"password\"),\n        \'label\': (\"密码确认\"),\n        \'placeholder\': (\"请再次输入您的新密码...\")\n      },hashTypes:{\'property\': \"STRING\",\'type\': \"STRING\",\'label\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'type\': depth0,\'label\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(\"<div class=\\\"form-group buttons\\\"><div class=\\\"col-sm-2\\\"></div><div class=\\\"col-sm-10\\\"><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"save\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-primary\\\"><i class=\\\"fa fa-save\\\"></i>保存</button><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"revertChanges\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-link\\\">重置</button></div></div>\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\';\n      return buffer;\n      }\n\n      stack1 = (helper = helpers[\'em-form\'] || (depth0 && depth0[\'em-form\']),options={hash:{\n        \'model\': (\"\"),\n        \'form_layout\': (\"horizontal\"),\n        \'submit_button\': (false)\n      },hashTypes:{\'model\': \"ID\",\'form_layout\': \"STRING\",\'submit_button\': \"BOOLEAN\"},hashContexts:{\'model\': depth0,\'form_layout\': depth0,\'submit_button\': depth0},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-form\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      \n    });\n  });//# sourceURL=gloit-app/templates/account/password.js");

;eval("define(\"gloit-app/templates/account/profile\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"<h2>个人信息</h2><h4>基本信息</h4><div class=\\\"form-group\\\"><label class=\\\"col-sm-2 control-label\\\">用户名</label><div class=\\\"col-sm-10\\\"><p class=\\\"form-control-static\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"username\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p></div></div>\");\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"realname\"),\n        \'label\': (\"真实姓名\"),\n        \'placeholder\': (\"可选\")\n      },hashTypes:{\'property\': \"STRING\",\'label\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'label\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"email\"),\n        \'label\': (\"邮箱\"),\n        \'type\': (\"email\"),\n        \'placeholder\': (\"必填且唯一\")\n      },hashTypes:{\'property\': \"STRING\",\'label\': \"STRING\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'label\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(\"<div class=\\\"form-group\\\"><label for=\\\"role\\\" class=\\\"col-sm-2 control-label\\\">角色</label><div class=\\\"col-sm-10\\\"><p class=\\\"form-control-static\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.pt || (depth0 && depth0.pt),options={hash:{\n        \'scope\': (\"models.role\")\n      },hashTypes:{\'scope\': \"STRING\"},hashContexts:{\'scope\': depth0},contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"roles\", options) : helperMissing.call(depth0, \"pt\", \"roles\", options))));\n      data.buffer.push(\"</p></div></div><div class=\\\"form-group buttons\\\"><div class=\\\"col-sm-2\\\"></div><div class=\\\"col-sm-10\\\"><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"save\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-primary\\\"><i class=\\\"fa fa-save\\\"></i>保存</button><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"revertChanges\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-link\\\">重置</button></div></div>\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\';\n      return buffer;\n      }\n\n      stack1 = (helper = helpers[\'em-form\'] || (depth0 && depth0[\'em-form\']),options={hash:{\n        \'model\': (\"model\"),\n        \'form_layout\': (\"horizontal\"),\n        \'submit_button\': (false)\n      },hashTypes:{\'model\': \"ID\",\'form_layout\': \"STRING\",\'submit_button\': \"BOOLEAN\"},hashContexts:{\'model\': depth0,\'form_layout\': depth0,\'submit_button\': depth0},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-form\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      \n    });\n  });//# sourceURL=gloit-app/templates/account/profile.js");

;eval("define(\"gloit-app/templates/application\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers[\'loading-slider\'] || (depth0 && depth0[\'loading-slider\']),options={hash:{\n        \'isLoading\': (\"loading\"),\n        \'duration\': (250)\n      },hashTypes:{\'isLoading\': \"ID\",\'duration\': \"INTEGER\"},hashContexts:{\'isLoading\': depth0,\'duration\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"loading-slider\", options))));\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=gloit-app/templates/application.js");

;eval("define(\"gloit-app/templates/authenticated\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers[\'gc-sidebar\'] || (depth0 && depth0[\'gc-sidebar\']),options={hash:{\n        \'brand\': (\"brand\"),\n        \'menus\': (\"sidebar.menus\"),\n        \'starterItems\': (\"sidebar.starterItems\")\n      },hashTypes:{\'brand\': \"ID\",\'menus\': \"ID\",\'starterItems\': \"ID\"},hashContexts:{\'brand\': depth0,\'menus\': depth0,\'starterItems\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"gc-sidebar\", options))));\n      data.buffer.push(escapeExpression((helper = helpers[\'gc-main-toolbar\'] || (depth0 && depth0[\'gc-main-toolbar\']),options={hash:{\n        \'items\': (\"breadcrumbs\")\n      },hashTypes:{\'items\': \"ID\"},hashContexts:{\'items\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"gc-main-toolbar\", options))));\n      data.buffer.push(\"<div class=\\\"gloit-content\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=gloit-app/templates/authenticated.js");

;eval("define(\"gloit-app/templates/login\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers[\'gc-login-form\'] || (depth0 && depth0[\'gc-login-form\']),options={hash:{\n        \'registerable\': (\"registerable\"),\n        \'title\': (\"title\"),\n        \'copyright\': (\"copyright\"),\n        \'identification\': (\"identification\"),\n        \'password\': (\"password\"),\n        \'supportedBrowers\': (\"supportedBrowers\"),\n        \'action\': (\"authenticate\")\n      },hashTypes:{\'registerable\': \"ID\",\'title\': \"ID\",\'copyright\': \"ID\",\'identification\': \"ID\",\'password\': \"ID\",\'supportedBrowers\': \"ID\",\'action\': \"STRING\"},hashContexts:{\'registerable\': depth0,\'title\': depth0,\'copyright\': depth0,\'identification\': depth0,\'password\': depth0,\'supportedBrowers\': depth0,\'action\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"gc-login-form\", options))));\n      \n    });\n  });//# sourceURL=gloit-app/templates/login.js");

;eval("define(\"gloit-app/templates/registrations/new\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<div class=\\\"gc-registrations-new\\\"><h2>用户注册</h2><form role=\\\"form\\\" class=\\\"form-horizontal form-fluid\\\"><div class=\\\"form-group\\\"><label for=\\\"username\\\" class=\\\"col-sm-3 control-label\\\">用户名</label><div class=\\\"col-sm-9\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"username\"),\n        \'class\': (\"form-control\"),\n        \'type\': (\"text\"),\n        \'id\': (\"username\"),\n        \'placeholder\': (\"必填且唯一\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\",\'type\': \"STRING\",\'id\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0,\'type\': depth0,\'id\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</div></div><div class=\\\"form-group\\\"><label for=\\\"realname\\\" class=\\\"col-sm-3 control-label\\\">真实姓名</label><div class=\\\"col-sm-9\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"realname\"),\n        \'class\': (\"form-control\"),\n        \'type\': (\"text\"),\n        \'id\': (\"realname\"),\n        \'placeholder\': (\"可选\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\",\'type\': \"STRING\",\'id\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0,\'type\': depth0,\'id\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</div></div><div class=\\\"form-group\\\"><label for=\\\"email\\\" class=\\\"col-sm-3 control-label\\\">邮箱</label><div class=\\\"col-sm-9\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"email\"),\n        \'class\': (\"form-control\"),\n        \'type\': (\"email\"),\n        \'id\': (\"email\"),\n        \'placeholder\': (\"必填且唯一\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\",\'type\': \"STRING\",\'id\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0,\'type\': depth0,\'id\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</div></div><div class=\\\"form-group\\\"><label for=\\\"password\\\" class=\\\"col-sm-3 control-label\\\">密码</label><div class=\\\"col-sm-9\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"password\"),\n        \'class\': (\"form-control\"),\n        \'type\': (\"password\"),\n        \'id\': (\"password\"),\n        \'placeholder\': (\"不少于8位\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\",\'type\': \"STRING\",\'id\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0,\'type\': depth0,\'id\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</div></div><div class=\\\"form-group\\\"><label for=\\\"password-confirmation\\\" class=\\\"col-sm-3 control-label\\\">密码确认</label><div class=\\\"col-sm-9\\\">\");\n      data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n        \'value\': (\"passwordConfirmation\"),\n        \'class\': (\"form-control\"),\n        \'type\': (\"password\"),\n        \'id\': (\"password-confirmation\"),\n        \'placeholder\': (\"不少于8位\")\n      },hashTypes:{\'value\': \"ID\",\'class\': \"STRING\",\'type\': \"STRING\",\'id\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'value\': depth0,\'class\': depth0,\'type\': depth0,\'id\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n      data.buffer.push(\"</div></div><div class=\\\"form-group buttons\\\"><div class=\\\"col-sm-3\\\"></div><div class=\\\"col-sm-9\\\"><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"save\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-primary\\\"><i class=\\\"fa fa-save\\\"></i>注册</button><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"cancel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-link\\\">取消</button></div></div></form></div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=gloit-app/templates/registrations/new.js");

;eval("define(\"gloit-app/templates/registrations/success\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      \n\n\n      data.buffer.push(\"<div class=\\\"gc-registrations-success\\\"><h2>用户注册</h2><div><div class=\\\"alert alert-success\\\"><p>您好！您的注册申请已经成功提交，请与管理员联系。待身份审核通过后，便可使用您的账号登录系统。</p><p><strong>返回<a href=\\\"/\\\">登录。</a></strong></p></div></div></div>\");\n      \n    });\n  });//# sourceURL=gloit-app/templates/registrations/success.js");

;eval("define(\"gloit-app/templates/shared/model-management-buttons\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"cancel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-link\\\">取消</button>\");\n      return buffer;\n      }\n\n    function program3(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"remove\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-danger\\\"><i class=\\\"fa fa-times\\\"></i>删除</button><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"revertChanges\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-link\\\">重置</button>\");\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"<p>\");\n      stack1 = helpers._triageMustache.call(depth0, \"removeConfirmationMessage\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p>\");\n      return buffer;\n      }\n\n    function program7(depth0,data) {\n      \n      var buffer = \'\';\n      return buffer;\n      }\n\n      data.buffer.push(\"<div class=\\\"form-group buttons\\\"><div class=\\\"col-sm-2\\\"></div><div class=\\\"col-sm-10\\\"><button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"save\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-primary\\\"><i class=\\\"fa fa-save\\\"></i>保存</button>\");\n      stack1 = helpers[\'if\'].call(depth0, \"model.isNew\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</div>\");\n      stack1 = (helper = helpers[\'bs-modal\'] || (depth0 && depth0[\'bs-modal\']),options={hash:{\n        \'name\': (\"removeConfirmationName\"),\n        \'fade\': (true),\n        \'footerButtonsBinding\': (\"removeConfirmationButtons\"),\n        \'title\': (\"removeConfirmationTitle\")\n      },hashTypes:{\'name\': \"ID\",\'fade\': \"BOOLEAN\",\'footerButtonsBinding\': \"STRING\",\'title\': \"ID\"},hashContexts:{\'name\': depth0,\'fade\': depth0,\'footerButtonsBinding\': depth0,\'title\': depth0},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"bs-modal\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</div>\");\n      return buffer;\n      \n    });\n  });//# sourceURL=gloit-app/templates/shared/model-management-buttons.js");

;eval("define(\"gloit-app/templates/user\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"users/form\", options) : helperMissing.call(depth0, \"partial\", \"users/form\", options))));\n      \n    });\n  });//# sourceURL=gloit-app/templates/user.js");

;eval("define(\"gloit-app/templates/users\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, helper, options, escapeExpression=this.escapeExpression, self=this, helperMissing=helpers.helperMissing;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"<li>\");\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"route\", options) : helperMissing.call(depth0, \"link-to\", \"route\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</li>\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"<i \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"icon\")\n      },hashTypes:{\'class\': \"ID\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></i>\");\n      stack1 = helpers._triageMustache.call(depth0, \"text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      }\n\n    function program4(depth0,data) {\n      \n      var buffer = \'\';\n      return buffer;\n      }\n\n    function program6(depth0,data) {\n      \n      var stack1, helper, options;\n      stack1 = (helper = helpers[\'link-to\'] || (depth0 && depth0[\'link-to\']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(7, program7, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"user\", \"id\", options) : helperMissing.call(depth0, \"link-to\", \"user\", \"id\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      }\n    function program7(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"<div class=\\\"name\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"username\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\" (\");\n      stack1 = helpers._triageMustache.call(depth0, \"realname\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\")</div><div class=\\\"email\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"email\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      stack1 = helpers[\'if\'].call(depth0, \"accessLocked\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</div>\");\n      return buffer;\n      }\n    function program8(depth0,data) {\n      \n      \n      data.buffer.push(\"<i class=\\\"fa fa-lock text-danger pull-right\\\"></i>\");\n      }\n\n      data.buffer.push(\"<ul class=\\\"gc-toolbar-links pull-right\\\">\");\n      stack1 = helpers.each.call(depth0, \"toolbarLinks\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</ul>\");\n      stack1 = (helper = helpers.collection || (depth0 && depth0.collection),options={hash:{\n        \'content\': (\"model\"),\n        \'height\': (100),\n        \'width\': (300),\n        \'rowHeight\': (60)\n      },hashTypes:{\'content\': \"ID\",\'height\': \"INTEGER\",\'width\': \"INTEGER\",\'rowHeight\': \"INTEGER\"},hashContexts:{\'content\': depth0,\'height\': depth0,\'width\': depth0,\'rowHeight\': depth0},inverse:self.program(4, program4, data),fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data},helper ? helper.call(depth0, \"GloitComponent.SidelistComponent\", options) : helperMissing.call(depth0, \"collection\", \"GloitComponent.SidelistComponent\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=gloit-app/templates/users.js");

;eval("define(\"gloit-app/templates/users/form\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1, helper, options;\n      data.buffer.push(\"<h2>\");\n      stack1 = helpers._triageMustache.call(depth0, \"formLegend\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      stack1 = helpers[\'if\'].call(depth0, \"lockable\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      stack1 = helpers[\'if\'].call(depth0, \"unlockable\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(4, program4, data),fn:self.program(6, program6, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</h2>\");\n      stack1 = helpers[\'if\'].call(depth0, \"model.isNew\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(10, program10, data),fn:self.program(8, program8, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"realname\"),\n        \'label\': (\"真实姓名\"),\n        \'placeholder\': (\"可选\")\n      },hashTypes:{\'property\': \"STRING\",\'label\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'label\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"email\"),\n        \'label\': (\"邮箱\"),\n        \'type\': (\"email\"),\n        \'placeholder\': (\"必填且唯一\")\n      },hashTypes:{\'property\': \"STRING\",\'label\': \"STRING\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'label\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"password\"),\n        \'label\': (\"密码\"),\n        \'type\': (\"password\"),\n        \'placeholder\': (\"不少于8位\")\n      },hashTypes:{\'property\': \"STRING\",\'label\': \"STRING\",\'type\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'label\': depth0,\'type\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      data.buffer.push(\"<div class=\\\"form-group\\\"><label for=\\\"roles\\\" class=\\\"col-sm-2 control-label\\\">角色</label><div class=\\\"col-sm-10\\\">\");\n      data.buffer.push(escapeExpression(helpers.view.call(depth0, \"Ember.Select\", {hash:{\n        \'content\': (\"availableRoles\"),\n        \'value\': (\"roles\"),\n        \'optionLabelPath\': (\"content.label\"),\n        \'optionValuePath\': (\"content.value\"),\n        \'prompt\': (\"-> 请选择用户角色 <-\")\n      },hashTypes:{\'content\': \"ID\",\'value\': \"ID\",\'optionLabelPath\': \"STRING\",\'optionValuePath\': \"STRING\",\'prompt\': \"STRING\"},hashContexts:{\'content\': depth0,\'value\': depth0,\'optionLabelPath\': depth0,\'optionValuePath\': depth0,\'prompt\': depth0},contexts:[depth0],types:[\"ID\"],data:data})));\n      data.buffer.push(\"</div></div>\");\n      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"shared/model-management-buttons\", options) : helperMissing.call(depth0, \"partial\", \"shared/model-management-buttons\", options))));\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"lock\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-danger pull-right\\\"><i class=\\\"fa fa-lock\\\"></i>锁定</button>\");\n      return buffer;\n      }\n\n    function program4(depth0,data) {\n      \n      var buffer = \'\';\n      return buffer;\n      }\n\n    function program6(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"<button \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"unlock\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\" class=\\\"btn btn-success pull-right\\\"><i class=\\\"fa fa-unlock\\\"></i>解锁</button>\");\n      return buffer;\n      }\n\n    function program8(depth0,data) {\n      \n      var helper, options;\n      data.buffer.push(escapeExpression((helper = helpers[\'em-input\'] || (depth0 && depth0[\'em-input\']),options={hash:{\n        \'property\': (\"username\"),\n        \'label\': (\"用户名\"),\n        \'placeholder\': (\"必填且唯一\")\n      },hashTypes:{\'property\': \"STRING\",\'label\': \"STRING\",\'placeholder\': \"STRING\"},hashContexts:{\'property\': depth0,\'label\': depth0,\'placeholder\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-input\", options))));\n      }\n\n    function program10(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"<div class=\\\"form-group\\\"><label for=\\\"username\\\" class=\\\"col-sm-2 control-label\\\">用户名</label><div class=\\\"col-sm-10\\\"><p class=\\\"form-control-static\\\">\");\n      stack1 = helpers._triageMustache.call(depth0, \"username\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"</p></div></div>\");\n      return buffer;\n      }\n\n      stack1 = (helper = helpers[\'em-form\'] || (depth0 && depth0[\'em-form\']),options={hash:{\n        \'model\': (\"model\"),\n        \'form_layout\': (\"horizontal\"),\n        \'submit_button\': (false)\n      },hashTypes:{\'model\': \"ID\",\'form_layout\': \"STRING\",\'submit_button\': \"BOOLEAN\"},hashContexts:{\'model\': depth0,\'form_layout\': depth0,\'submit_button\': depth0},inverse:self.program(4, program4, data),fn:self.program(1, program1, data),contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"em-form\", options));\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      else { data.buffer.push(\'\'); }\n      \n    });\n  });//# sourceURL=gloit-app/templates/users/form.js");

;eval("define(\"gloit-app/templates/users/new\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"users/form\", options) : helperMissing.call(depth0, \"partial\", \"users/form\", options))));\n      \n    });\n  });//# sourceURL=gloit-app/templates/users/new.js");

;eval("define(\"gloit-app/tests/gloit-app/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - gloit-app/tests/helpers\');\n    test(\'gloit-app/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'gloit-app/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=gloit-app/tests/gloit-app/tests/helpers/resolver.jshint.js");

;eval("define(\"gloit-app/tests/gloit-app/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - gloit-app/tests/helpers\');\n    test(\'gloit-app/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'gloit-app/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=gloit-app/tests/gloit-app/tests/helpers/start-app.jshint.js");

;eval("define(\"gloit-app/tests/gloit-app/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - gloit-app/tests\');\n    test(\'gloit-app/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'gloit-app/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=gloit-app/tests/gloit-app/tests/test-helper.jshint.js");

;eval("define(\"gloit-app/tests/gloit-app/tests/test-loader.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - gloit-app/tests\');\n    test(\'gloit-app/tests/test-loader.js should pass jshint\', function() { \n      ok(true, \'gloit-app/tests/test-loader.js should pass jshint.\'); \n    });\n  });//# sourceURL=gloit-app/tests/gloit-app/tests/test-loader.jshint.js");

;eval("define(\"gloit-app/tests/helpers/resolver\", \n  [\"ember/resolver\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=gloit-app/tests/helpers/resolver.js");

;eval("define(\"gloit-app/tests/helpers/start-app\", \n  [\"ember\",\"gloit-app/app\",\"gloit-app/router\",\"gloit-app/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=gloit-app/tests/helpers/start-app.js");

;eval("define(\"gloit-app/tests/test-helper\", \n  [\"gloit-app/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=gloit-app/tests/test-helper.js");

;eval("define(\"gloit-app/tests/test-loader\", \n  [\"ember\"],\n  function(__dependency1__) {\n    \"use strict\";\n    /* globals requirejs,require */\n    var Ember = __dependency1__[\"default\"];\n\n    // TODO: load based on params\n    Ember.keys(requirejs.entries).forEach(function(entry) {\n      if ((/\\-test/).test(entry)) {\n        require(entry, null, null, true);\n      }\n    });\n  });//# sourceURL=gloit-app/tests/test-loader.js");

;eval("define(\"gloit-app/utils/pollster\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Pollster;\n\n    Pollster = Ember.Object.extend({\n      start: function(model, timeout) {\n        if (timeout == null) {\n          timeout = 1000;\n        }\n        this.model = model;\n        return this.timer = setInterval(this.onPoll.bind(this), timeout);\n      },\n      stop: function() {\n        if (this.timer) {\n          return clearInterval(this.timer);\n        }\n      },\n      onPoll: function() {\n        return this.model.reload();\n      }\n    });\n\n    __exports__[\"default\"] = Pollster;\n  });//# sourceURL=gloit-app/utils/pollster.js");

;eval("define(\"gloit-app/views/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var ApplicationView;\n\n    ApplicationView = Ember.View.extend({\n      classNames: \'gloit-app\'\n    });\n\n    __exports__[\"default\"] = ApplicationView;\n  });//# sourceURL=gloit-app/views/application.js");

;eval("define(\"gloit-app/views/authenticated\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var AuthenticatedView;\n\n    AuthenticatedView = Ember.View.extend({\n      classNames: \'gloit-authenticated\',\n      didInsertElement: function() {\n        var height;\n        height = this.$(\'.gloit-content\').height() - 60;\n        return this.$(\'.gloit-content\').height(height);\n      }\n    });\n\n    __exports__[\"default\"] = AuthenticatedView;\n  });//# sourceURL=gloit-app/views/authenticated.js");

/* jshint ignore:start */

define('gloit-app/config/environment', ['ember'], function(Ember) {
  var metaName = 'gloit-app/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
});

if (runningTests) {
  require('gloit-app/tests/test-helper');
} else {
  require('gloit-app/app')['default'].create({"api":{"host":"http://localhost:4200","namespace":"api","baseUrl":"http://localhost:4200/api"},"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
